{"version":3,"sources":["components/Header.jsx","components/Message.jsx","components/LandingPage.jsx","components/RoomInfo.jsx","components/Buttons.jsx","components/RoundTitle.jsx","components/RoundInfo.jsx","components/Playground.jsx","components/Loader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","onClick","window","open","Message","type","elem","message","LandingPage","onSubmit","event","connect","roomNumber","teamName","isFacilitator","required","onChange","onChangeRoomNumber","value","placeholder","onChangeTeamName","handleCheck","canReJoin","tryReJoin","anyConnectionError","RoomInfo","connectedTeams","map","index","Buttons","play","RoundTitle","round","RoundInfo","renderCurrentRoundChoices","choices","sortedChoices","forEach","team","choice","push","score","roundData","length","rounds","finalScores","renderFinalScore","Playground","playgroundBody","showButtons","showWaiting","option","gameStarted","hasGameEnded","Loader","App","useState","connected","setConnected","setConnectedTeams","setGameStarted","setAnyConnectionError","setRound","setScore","setRoundData","roundProgress","setRoundProgress","setRoomNumber","setTeamName","setShowButtons","setShowWaiting","setIsFacilitator","setMessage","sessionStorage","getItem","JSON","parse","setCanReJoin","loading","setLoading","setHasGameEnded","socketRef","useRef","useEffect","current","io","transports","on","data","setPlayState","setItem","stringify","removeItem","onbeforeunload","emit","parseInt","body","reJoinRoom","a","prevState","isGameOver","e","facilitator","rejoin","preventDefault","error","activeSessions","find","setWaitingState","roundInfo","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94545388.chunk.js","sourcesContent":["export default function Header(props) {\n  function openGameRules() {\n    window.open(\"./about.pdf\", \"_blank\");\n  }\n  return (\n    <header className=\"App-header\">\n      <h1>Red / Green Game</h1>\n      <button onClick={openGameRules}>About</button>\n    </header>\n  );\n}\n","export default function Message(props) {\n  return (\n    <div className={props.type}>\n        <props.elem>{props.message}</props.elem>\n    </div>\n  );\n}\n","import Message from \"./Message\";\n\nexport default function LandingPage(props) {\n  return (\n    <>\n      <div className=\"join-game-wrapper\">\n        <form\n          onSubmit={event => props.connect(event, props.roomNumber, props.teamName, props.isFacilitator, false, null, null)}\n          className=\"join-game-form \">\n          <input\n            type=\"text\"\n            required\n            className=\"text\"\n            onChange={event => props.onChangeRoomNumber(event)}\n            value={props.roomNumber}\n            placeholder=\"Enter the room number you want to join...\"\n          />\n          <input\n            type=\"text\"\n            className=\"text\"\n            required\n            onChange={event => props.onChangeTeamName(event)}\n            value={props.teamName}\n            placeholder=\"Enter a name for your team...\"\n          />\n          <div>\n            <p className=\"facilitator-check\">Check this box if you're the facilitator</p>\n            <input className=\"check\" type=\"checkbox\" onClick={props.handleCheck} />\n          </div>\n          <button type=\"submit\" className=\"join\">\n            Join Game\n          </button>\n        </form>\n        {props.canReJoin ? (\n          <>\n            <Message elem=\"p\" type=\"message\" message={`You were preivously inside another room. Would you like to join back?`} />\n            <button onClick={props.tryReJoin} className=\"join\">\n              Join back\n            </button>\n          </>\n        ) : null}\n        {props.anyConnectionError ? <Message elem=\"p\" type=\"error\" message={props.message} /> : null}\n      </div>\n    </>\n  );\n}\n","import Message from \"./Message\";\n\nexport default function RoomInfo(props) {\n  return (\n    <>\n      <Message type=\"message\" elem=\"h3\" message={\"Welcome to room \" + props.roomNumber + ', ' + props.teamName} />\n      <div>\n        {props.connectedTeams.map((elem, index) => {\n          return <p key={index} className={elem.teamName === props.teamName ? \"me\" : \"player\"}>{elem.isFacilitator ?  elem.teamName + \" (f)\" : elem.teamName}</p>;\n        })}\n      </div>\n    </>\n  );\n}\n","import Message from \"./Message\";\n\nexport default function Buttons(props) {\n  return (\n    <div className=\"buttons-wrapper\">\n      {!props.isFacilitator ? (\n        <>\n          <button className=\"play-button red\" onClick={() => props.play(\"red\")}>\n            Red\n          </button>\n          <button\n            className=\"play-button green\"\n            onClick={() => props.play(\"green\")}\n          >\n            Green\n          </button>\n        </>\n      ) : (\n        <Message\n          type=\"message\"\n          elem=\"p\"\n          message={\n            \"As facilitator, you cannot vote. You need to wait till the end of the round to discuss with the teams.\"\n          }\n        />\n      )}\n    </div>\n  );\n}\n","export default function RoundTitle(props) {\n  return (\n    <div className=\"title\">\n      <h2>Round {props.round}</h2>\n    </div>\n  );\n}\n","import Message from \"./Message\";\n\nexport default function RoundInfo(props) {\n  const renderCurrentRoundChoices = choices => {\n    let sortedChoices = [];\n    props.connectedTeams.forEach(team => {\n      choices.forEach((choice, index) => {\n        if (choice.teamName === team.teamName) {\n          sortedChoices.push(\n            <td key={index} className={choice.choice}>\n              {choice.score}\n            </td>\n          );\n        }\n      });\n    });\n    return sortedChoices;\n  };\n\n  const renderFinalScore = (rounds, team, index) => {\n    let finalScores = [];\n    let score = 0;\n    rounds.forEach(round => {\n      round.choices.forEach((choice, index) => {\n        if (choice.teamName === team.teamName && !team.isFacilitator) {\n          score += choice.score;\n        }\n      });\n    });\n    finalScores.push(<td key={index}>{score}</td>);\n    return finalScores;\n  };\n  return (\n    <div className=\"round-info container\">\n      <Message type=\"message\" message=\"Score board\" elem=\"h2\" />\n      <table className=\"score\">\n        <thead>\n          <tr>\n            <th>Round</th>\n            {props.connectedTeams.map((elem, index) => {\n              return elem.isFacilitator === false ? <th key={index}>{elem.teamName}</th> : null;\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {props.roundData.map((elem, index) => {\n            return elem.choices.length > 2 ? (\n              <tr key={index}>\n                <td>{elem.round}</td>\n                {renderCurrentRoundChoices(elem.choices)}\n              </tr>\n            ) : null;\n          })}\n          <tr>\n            <td>Final</td>\n            {props.connectedTeams.map((elem, index) => {\n              return elem.isFacilitator === false ? renderFinalScore(props.roundData, elem, index) : null;\n            })}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import Buttons from \"./Buttons\";\nimport RoundTitle from \"./RoundTitle\";\nimport RoundInfo from \"./RoundInfo\";\nimport Message from \"./Message\";\n\nexport default function Playground(props) {\n  function playChoice(option) {\n    if (props.gameStarted) {\n      props.play(props.round, props.roomNumber, props.teamName, option, props.score);\n    }\n  }\n  let playgroundBody;\n  if (props.showButtons && !props.showWaiting) {\n    playgroundBody = <Buttons play={playChoice} isFacilitator={props.isFacilitator} />;\n  } else {\n    playgroundBody = <Message type=\"message\" elem=\"p\" message={\"Waiting for other teams...\"} />;\n  }\n  return (\n    <div className=\"playground\">\n      {!props.hasGameEnded ? <RoundTitle round={props.round} /> : null}\n      {!props.hasGameEnded ? playgroundBody : <Message type=\"message\" elem=\"p\" message={\"The game is over. Check the scoreboard below.\"} />}\n      {props.roundData && props.roundData.length > 0 ? (\n        <RoundInfo\n          round={props.round}\n          roundData={props.roundData}\n          connectedTeams={props.connectedTeams}\n          teamName={props.teamName}\n          hasGameEnded={props.hasGameEnded}\n        />\n      ) : (\n        <Message type=\"message\" elem=\"p\" message={\"Finish the round to see scores...\"} />\n      )}\n    </div>\n  );\n}\n","\nexport default function Loader(props) {\n    return (\n      <div className=\"loader\"></div>\n    );\n}","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport LandingPage from \"./components/LandingPage\";\nimport RoomInfo from \"./components/RoomInfo\";\nimport Playground from \"./components/Playground\";\nimport Loader from \"./components/Loader\";\nimport { useState, useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nfunction App() {\n  const [connected, setConnected] = useState(false);\n  const [connectedTeams, setConnectedTeams] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [anyConnectionError, setAnyConnectionError] = useState(false);\n  const [round, setRound] = useState(1);\n  const [score, setScore] = useState(0);\n  const [roundData, setRoundData] = useState([]);\n  const [roundProgress, setRoundProgress] = useState([]);\n  const [roomNumber, setRoomNumber] = useState(\"\");\n  const [teamName, setTeamName] = useState(\"\");\n  const [showButtons, setShowButtons] = useState(true);\n  const [showWaiting, setShowWaiting] = useState(true);\n  const [isFacilitator, setIsFacilitator] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [canReJoin, setCanReJoin] = useState(\n    sessionStorage.getItem(\"PREV_STATE\") ? JSON.parse(sessionStorage.getItem(\"PREV_STATE\")).canReJoin : false\n  );\n  const [loading, setLoading] = useState(false);\n  const [hasGameEnded, setHasGameEnded] = useState(false);\n  const socketRef = useRef();\n\n  useEffect(() => {\n    if (!socketRef.current) {\n      socketRef.current = io(\"/\", { transports: [\"polling\"] });\n    }\n    socketRef.current.on(\"finish_round\", data => {\n      setRoundData(data.rounds);\n      setRoundProgress(data.rounds);\n      setPlayState();\n      setRound(round => round + 1);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (connected && !hasGameEnded) {\n      sessionStorage.setItem(\n        \"PREV_STATE\",\n        JSON.stringify({\n          connected: connected,\n          connectedTeams: connectedTeams,\n          gameStarted: gameStarted,\n          anyConnectionError: anyConnectionError,\n          round: round,\n          score: score,\n          roundData: roundData,\n          roundProgress: roundProgress,\n          roomNumber: roomNumber,\n          teamName: teamName,\n          showButtons: showButtons,\n          showWaiting: showWaiting,\n          isFacilitator: isFacilitator,\n          message: message,\n          canReJoin: canReJoin,\n          hasGameEnded: hasGameEnded,\n        })\n      );\n      socketRef.current.on(\"finish_game\", data => {\n        sessionStorage.removeItem(\"PREV_STATE\");\n        setCanReJoin(false);\n        setHasGameEnded(true);\n        window.onbeforeunload = function (event) {\n          socketRef.current.emit(\"room_clear\", { roomNumber: parseInt(roomNumber), teamName: teamName, isFacilitator: isFacilitator });\n        };\n      });\n    }\n  });\n\n  // useEffect(() => {\n  //   return () => {\n  //     if (hasGameEnded) {\n  //       alert(\"unmounting\");\n  //       socketRef.current.emit(\"room_clear\", { roomNumber: parseInt(roomNumber), teamName: teamName, isFacilitator: isFacilitator });\n  //     }\n  //   };\n  // }, [hasGameEnded, canReJoin]);\n\n  const reJoinRoom = async () => {\n    if (sessionStorage.getItem(\"PREV_STATE\")) {\n      const prevState = await JSON.parse(sessionStorage.getItem(\"PREV_STATE\"));\n\n      setLoading(true);\n\n      socketRef.current.emit(\"request_re_join\", {\n        roomNumber: parseInt(prevState.roomNumber),\n        teamName: prevState.teamName,\n        isFacilitator: prevState.isFacilitator,\n      });\n      socketRef.current.on(\"cannot_re_join\", isGameOver => {\n        sessionStorage.removeItem(\"PREV_ITEM\");\n        setCanReJoin(false);\n        setLoading(false);\n        if (isGameOver) {\n          socketRef.current.emit(\"room_clear\", {\n            roomNumber: parseInt(prevState.roomNumber),\n            teamName: prevState.teamName,\n            isFacilitator: prevState.isFacilitator,\n          });\n        }\n        return;\n      });\n      socketRef.current.on(\"can_re_join\", async () => {\n        setConnected(prevState.connected);\n        setConnectedTeams(prevState.connectedTeams);\n        setGameStarted(prevState.gameStarted);\n        setAnyConnectionError(prevState.anyConnectionError);\n        setRound(prevState.round);\n        setScore(prevState.score);\n        setRoundData(prevState.roundData);\n        setRoundProgress(prevState.roundProgress);\n        setRoomNumber(prevState.roomNumber);\n        setTeamName(prevState.teamName);\n        setShowButtons(prevState.showButtons);\n        setShowWaiting(prevState.showWaiting);\n        setIsFacilitator(prevState.isFacilitator);\n        setMessage(prevState.message);\n        setCanReJoin(prevState.canReJoin);\n        setLoading(false);\n        connect(\n          null,\n          prevState.roomNumber,\n          prevState.teamName,\n          prevState.isFacilitator,\n          true,\n          prevState.roundProgress || roundProgress,\n          prevState.round || round\n        );\n      });\n    }\n  };\n\n  const handleCheck = () => {\n    setIsFacilitator(!isFacilitator);\n  };\n\n  const connect = async (e, roomNumber, teamName, facilitator, rejoin, roundProgress, round) => {\n    setLoading(true);\n    if (e) {\n      e.preventDefault();\n    }\n    socketRef.current.emit(\"join_game\", {\n      roomNumber: parseInt(roomNumber),\n      teamName: teamName,\n      isFacilitator: facilitator,\n      rejoin: rejoin,\n    });\n    socketRef.current.on(\"connection_error\", error => {\n      setLoading(false);\n      setAnyConnectionError(true);\n      setMessage(error);\n    });\n    socketRef.current.on(\"joined_teams_in_current_room\", data => {\n      setConnectedTeams(data[0].activeSessions);\n      setAnyConnectionError(false);\n      setConnected(true);\n      setCanReJoin(true);\n      setLoading(false);\n    });\n    socketRef.current.on(\"can_start_game\", data => {\n      if (!data) setPlayState();\n      else {\n        switch (facilitator) {\n          case false:\n            if (data.rounds && data.rounds[data.rounds.length - 1]) {\n              if (\n                data.rounds[data.rounds.length - 1].choices.length > 2 &&\n                data.rounds[data.rounds.length - 1].choices.find(elem => elem.teamName === teamName)\n              ) {\n                setRound(data.rounds.length + 1);\n                setPlayState();\n              } else if (!data.rounds[data.rounds.length - 1].choices.find(elem => elem.teamName === teamName)) {\n                setRound(data.rounds.length);\n                setPlayState();\n              } else {\n                setWaitingState();\n              }\n            }\n            setRoundData(data.rounds);\n            setRoundProgress(data.rounds);\n            break;\n          default:\n            setRound(data.rounds[data.rounds.length - 1].choices.length > 2 ? data.rounds.length + 1 : data.rounds.length);\n            setRoundData(data.rounds);\n            setRoundProgress(data.rounds);\n        }\n      }\n      setGameStarted(true);\n      setLoading(false);\n    });\n    socketRef.current.on(\"cannot_start_game\", () => {\n      setWaitingState();\n      setLoading(false);\n    });\n  };\n\n  const changeRoomNumber = e => {\n    setRoomNumber(e.target.value);\n  };\n\n  const changeTeamName = e => {\n    setTeamName(e.target.value);\n  };\n\n  const play = (round, roomNumber, teamName, choice, score) => {\n    setWaitingState();\n    socketRef.current.emit(\"start_game\", {\n      round: round,\n      roomNumber: parseInt(roomNumber),\n      teamName: teamName,\n      choice: choice,\n      score: score,\n    });\n    socketRef.current.on(\"started_game\", roundInfo => {\n      setRoundProgress(roundInfo.rounds);\n    });\n  };\n\n  const setWaitingState = () => {\n    setShowButtons(false);\n    setShowWaiting(true);\n  };\n\n  const setPlayState = () => {\n    setShowWaiting(false);\n    setShowButtons(true);\n  };\n\n  let body;\n  if (connected) {\n    body = (\n      <>\n        <RoomInfo connectedTeams={connectedTeams} roomNumber={roomNumber} teamName={teamName} message={message} />\n        <Playground\n          round={round}\n          score={score}\n          socketRef={socketRef}\n          gameStarted={gameStarted}\n          hasGameEnded={hasGameEnded}\n          play={play}\n          roomNumber={roomNumber}\n          roundData={roundData}\n          message={message}\n          connectedTeams={connectedTeams}\n          isFacilitator={isFacilitator}\n          teamName={teamName}\n          showButtons={showButtons}\n          showWaiting={showWaiting}\n        />\n      </>\n    );\n  } else {\n    body = (\n      <LandingPage\n        connect={connect}\n        roomNumber={roomNumber}\n        teamName={teamName}\n        anyConnectionError={anyConnectionError}\n        handleCheck={handleCheck}\n        message={message}\n        isFacilitator={isFacilitator}\n        canReJoin={canReJoin}\n        tryReJoin={reJoinRoom}\n        onChangeRoomNumber={changeRoomNumber}\n        onChangeTeamName={changeTeamName}\n      />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {loading ? <Loader /> : body}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}